name: CI of mc_rtc_ros

on:
  push:
    paths-ignore:
      # Changes to those files don't mandate running CI
      - ".gitlab-ci.yml"
      - ".jrl-ci"
      - ".github/workflows/package.yml"
      - "debian/**"
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:

  clang-format:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: Install clang-format-6.0
      run: |
        sudo rm -f /etc/apt/sources.list.d/dotnetdev.list /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get -qq update
        sudo apt-get -qq remove clang-6.0 libclang1-6.0 libclang-common-6.0-dev libllvm6.0
        sudo apt-get -qq install clang-format-6.0 clang-format
    - name: Run clang-format-check
      run: |
        ./.clang-format-check.sh
  build:
    needs: clang-format
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-16.04, ubuntu-18.04, macos-latest]
        compiler: [gcc]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Temporary APT mirrors cleanup
      if: startsWith(runner.os, 'Linux')
      run: |
        set -e
        sudo rm -f /etc/apt/sources.list.d/dotnetdev.list /etc/apt/sources.list.d/microsoft-prod.list
    - name: Install ROS
      if: (matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04')
      run: |
        set -e
        set -x
        pushd .
        if [ "${{ matrix.os }}" = "ubuntu-16.04" ]
        then
          export ROS_DISTRO="kinetic"
        else
          export ROS_DISTRO="melodic"
        fi
        sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
        wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
        sudo apt-get update -qq
        sudo apt-get install -qq ros-${ROS_DISTRO}-ros-base ros-${ROS_DISTRO}-tf2-ros ros-${ROS_DISTRO}-tf ros-${ROS_DISTRO}-rviz
        . /opt/ros/${ROS_DISTRO}/setup.bash
        mkdir -p /tmp/_ci/catkin_ws/src/
        cd /tmp/_ci/catkin_ws/src
        catkin_init_workspace
        git clone --recursive https://github.com/jrl-umi3218/mc_rtc_msgs
        git clone --recursive https://github.com/jrl-umi3218/mc_rtc_data
        cd ../
        catkin_make || exit 1
        . devel/setup.bash
        echo "::set-env name=ROS_DISTRO::${ROS_DISTRO}"
        echo "::set-env name=PKG_CONFIG_PATH::${PKG_CONFIG_PATH}"
        echo "::set-env name=ROS_MASTER_URI::${ROS_MASTER_URI}"
        echo "::set-env name=PYTHONPATH::${PYTHONPATH}"
        echo "::set-env name=CMAKE_PREFIX_PATH::${CMAKE_PREFIX_PATH}"
        echo "::set-env name=PATH::${PATH}"
        echo "::set-env name=LD_LIBRARY_PATH::${LD_LIBRARY_PATH}"
        popd
    - name: Install dependencies
      uses: jrl-umi3218/github-actions/install-dependencies@master
      with:
        compiler: gcc
        build-type: RelWithDebInfo
        ubuntu: |
          apt: cython cython3 python-nose python3-nose python-numpy python3-numpy python-coverage python3-coverage python-setuptools python3-setuptools libeigen3-dev doxygen doxygen-latex libboost-all-dev libtinyxml2-dev libgeos++-dev libnanomsg-dev libyaml-cpp-dev libltdl-dev qt5-default libqwt-qt5-dev
        macos: |
          cask: gfortran
          brew: eigen boost tinyxml2 geos nanomsg yaml-cpp pkg-config libtool qt qwt
          pip: Cython coverage nose numpy
          github:
            - path: jrl-umi3218/mc_rtc_data
        github: |
          - path: humanoid-path-planner/hpp-spline
            ref: v4.7.0
            options: -DBUILD_PYTHON_INTERFACE:BOOL=OFF
          - path: jrl-umi3218/Eigen3ToPython
          - path: jrl-umi3218/SpaceVecAlg
          - path: jrl-umi3218/sch-core
          - path: jrl-umi3218/eigen-qld
          - path: jrl-umi3218/sch-core-python
          - path: jrl-umi3218/RBDyn
          - path: jrl-umi3218/Tasks
          - path: jrl-umi3218/mc_rbdyn_urdf
          - path: jrl-umi3218/mc_rtc
    - name: Build and test
      if: matrix.os == 'macos-latest'
      uses: jrl-umi3218/github-actions/build-cmake-project@master
      with:
        compiler: gcc
        build-type: RelWithDebInfo
    - name: Build with catkin
      if: (matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04')
      run: |
        set -e
        set -x
        PROJECT_DIR=`pwd`
        cd /tmp/_ci/catkin_ws
        cp -r $PROJECT_DIR src/
        catkin_make || exit 1
    - name: Slack Notification
      if: failure()
      uses: archive/github-actions-slack@master
      with:
        slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_TOKEN }}
        slack-channel: '#ci'
        slack-text: >
          [mc_rtc] Build *${{ matrix.os }}/${{ matrix.build-type }} (${{ matrix.compiler }})* failed on ${{ github.ref }}
